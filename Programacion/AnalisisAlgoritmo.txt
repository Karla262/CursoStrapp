EJEMPLO 2.1
Calcular la paga neta de un trabajador conociendo el número de horas trabajadas, la tarifa horaria y la tasa de
impuestos.

ObtenerHorasTrabajadas = 160 horas
ObtenerTarifaHoraria = 100 pesos x 1 hora
ObtenerImpuesto = 16% = 0.16

/* pago bruto = numero horas trabajadas * tarifa horaria */
/* Impuesto = pago bruto * impuestos; */
/* Pago neto = pago bruto - impuesto; */

PagoBruto = 160 * 100    		// 16,000
Impuesto = 16,000 * 0.16		// 2,560
PagoNeto = 16,000 - 2,560       // 13,440

----------------------------------------------------------

1.- Inicio
2.- Obtener HorasTrabajadas
3.- Obtener TarifaHoraria
4.- Obtener TasaImpuesto
5.- Declara variables PagoBruto, ImpuestoAPagar, PagoNeto
6.- Calcular PagoBruto = HorasTrabajadas * TarifaHoraria
7.- Calcular ImpuestoAPagar = PagoBruto * TasaImpuesto
8.- Calcular PagoNeto = PagoBruto - ImpuestoAPagar
9.- Imprimir el pago neto
9.- Fin


EJEMPLO 2.2
Calcular el valor de la suma 1+2+3+...+100.

totalSuma = 0

totalSuma = 1   		1 + 2 + 3 + 4 + 5 + 6 + 7 .... 100
						-----
totalSuma = 3				3 + 3
						  -------
totalSuma = 6				  6   + 4
							   ------
totalSuma = 10					  10  + 5
								  --------
totalSuma = 15						  15
					  
			  


1.- Inicio 
2.- Declara e inicializar la variable totalSuma = 0
3.- repetir del 1 al 100
	2.1 Imprimir la iteracion
	2.2 totalSuma = totalSuma + iteracion
	2.3 Fin de repetir
3.- Fin
			  
			  
-----------------------------------------------------------------------------------------------------------------------------------
EJEMPLO 2.4
Un cliente ejecuta un pedido a una fábrica. La fábrica examina en su banco de datos la ficha del cliente, si el cliente
es solvente entonces la empresa acepta el pedido; en caso contrario, rechazará el pedido. Redactar el algoritmo
correspondiente.

-- 1.-PRINCIPAL
		1.- Inicio
		2.- Pedir el numero de cliente
		3.- Buscar al cliente dentro de la banco de datos -> Esto manda a llamar un subAlgoritmo 2
		4.- Si el cliente existe hacer lo siguiente
			4.1 Si existe
				4.1.1- Pedir al cliente el total del pedido
				4.1.2- Validar si el cliente es solvente contra el total del pedido
					Si es solvente se acepta el pedido
					Si no es solvente se rechaza el pedido
			4.2 Si no existe
				4.2.1 Mandar mensaje de que no existe
		6.- Fin 


-- 2.- Busqueda y regresa un cliente
1.- Inicio
2.- Recibir el parametro de numero cliente
3.- Crear un banco de datos   -> Esto manda a llamar un subAlgoritmo 3
4.- Buscar dentro de banco de datos el numero de cliente
5.- Repertir hasta encontrar el cliente con el numero cliente que se recibio por parametro
	5.1 Valida si existe el numero de cliente en banco de datos
		5.1.1 Si existe se regresa el cliente
6.- El cliente no existio regresamos nada
7.- Fin



-- 3.- Crea y regresa un banco de datos
1.- Inicio
2.- Definir la entidad Cliente para el banco de datos
3.- Vamos a crear y a guardar 5 cliente en el banco de datos (Esto va ser de manera constante)
	3.1- Vamos a crear el cliente -> Asignar el numero, nombre y el saldo
	3.2- Vamos a guarda el cliente en el banco de datos
4.- Regresamos el banco de datos
5.- Fin
	




----------------------------------------------------------------------------------------------------------------------------------
EJEMPLO 2.5
Se desea diseñar un algoritmo para saber si un número es primo o no.
Un número es primo si sólo puede dividirse por sí mismo y por la unidad (es decir, no tiene más divisores que
él mismo y la unidad). Por ejemplo, 9, 8, 6, 4, 12, 16, 20, etc., no son primos, ya que son divisibles por números
distintos a ellos mismos y a la unidad. Así, 9 es divisible por 3, 8 lo es por 2, etc. El algoritmo de resolución del
problema pasa por dividir sucesivamente el número por 2, 3, 4..., etc.

1.- Reglas
PARA QUE UN NUMERO SEA PRIMO: Tiene que ser divisible entre 1 y el mismo


31 / 1   = 31			---> DIVISIBLE
31 / 2   = 15.5
31 / 3   = 10.33
31 / 4   = 7.75
31 / 5   = 6.2
31 / 6   = 5.16
31 / 7   = 4.42
31 / 8   = 3.87
31 / 9   = 3.44
31 / 10  = 3.1
31 / 11  = 2.81
31 / 12  = 2.58
31 / 13  = 2.38
31 / 14  = 2.21
31 / 15  = 2.06
31 / 16  = 1.93
31 / 17  = 1.82
31 / 18  = 1.72
31 / 19  = 1.63
31 / 20  = 1.55
31 / 21  = 1.47
31 / 22  = 1.40
31 / 23  = 1.34
31 / 24  = 1.29
31 / 25  = 1.24
31 / 26  = 1.19
31 / 27  = 1.14
31 / 28  = 1.10
31 / 29  = 1.06
31 / 30  = 1.03
31 / 31  = 1			---> DIVISIBLE


CONTADOR 2

---------------------------------------------------------------------

8 / 1 = 8				--->  DIVISIBLE
8 / 2 = 4				--->  DIVISIBLE
8 / 3 = 1.66
8 / 4 = 2				--->  DIVISIBLE
8 / 5 = 1.6
8 / 6 = 1.33
8 / 7 = 1.14
8 / 8 = 1				---> DIVISIBLE


---------------------------------------------------------------------

8 NO ES PRIMO

8 / 2 = 4				----> DIVISIBLE
8 / 3 = 
8 / 4 = 
8 / 5 = 
8 / 6 = 
8 / 7 = 


7 / 2 = 3.5
7 / 3 = 2.33
7 / 4 = 1.75
7 / 5 = 1.xxx
7 / 6 = 1.xxx


1.- Inicio
2.- Obtener el numero N
3.- Repetir 2 hasta N - 1
	3.1 resto = N % iteracion
	3.2 Validar el resto
		3.2.1 Si el resto es 0, NO ES UN NUMERO PRIMO
			3.2.1.1 Imprimir que N no es numero primo
			3.2.1.2 Salir
4.- Llegue hasta aqui N ES NUMERO PRIMO
4.- Fin

--------------------------------------------------------------------

DEBE EXISTIR UNA OPCION MATEMATICA



--------------------------------------------------------------------

EJEMPLO 2.6

Realizar la suma de todos los números pares entre 2 y 1.000.
El problema consiste en sumar 2 + 4 + 6 + 8 ... + 1.000. Utilizaremos las palabras SUMA y NÚMERO (variables,
serán denominadas más tarde) para representar las sumas sucesivas (2+4), (2+4+6), (2+4+6+8), etc. La solución se
puede escribir con el siguiente algoritmo:


suma = 0
					2  +   4   +   6    +    8   +  10  +  12..... 1000
				   ---
suma = 2     suma + 2
			 ---------
suma = 6      	 suma  +   4
                 ------------
suma = 12  				suma   +  6


				   2 + 4 + 6 + + 8 + 10 =  30


LES TOCA EL DISEÑO DEL ALGORITMO Y LA CODIFICACION
1.- Inicio
2.- Declarar e inicializar suma = 0
3.- Repertir (de 2 en 2) desde 2 hasta 1000
	3.1 Sumar el numero de la iteracion a la variable suma
4.- Mostrar la suma de los numeros
5.- Fin



1.- Inicio
2.- Declara e inicializar suma = 0
3.- Declara e inicializar el numero 2 (Este es el que va ir incrementado de 2 en 2)
4.- Repetir mientras  numero sea menor que 1000
		4.1 Sumar el numero a la variable suma
		4.2 Incrementa el numero en 2
5.- Mostrar la suma de los numeros




---------------------------------------------------------------------

EJEMPLO 2.7
Calcular la media de una serie de números positivos, suponiendo que los datos se leen desde un terminal. Un valor
de cero —como entrada— indicará que se ha alcanzado el final de la serie de números positivos.

EJEMPLO = 5 + 4 + 6 + 8 + 10 = 33 / 5 = 6.6


Dame un numero: 5
Dame un numero: 4
Dame un numero: 6
Dame un numero: 8
Dame un numero: 10
Dame un numero: 0
La media es:6.6


1.- Inicio
2.- Declarar suma = 0
3.- Declarar contador = 0
4.- Declarar numero;
5.- hacer esto
	5.1 Obtener de la terminal un numero y guardar en la variable numero
	5.2 Validar que numero no sea 0 (Numero se difente de 0 numero != 0)
		5.2.1 Agrega, Acumula o suma el numero a la variable suma
		5.2.2 Incremente contador en 1
6.- mientras numero no sea igual 0
7.- calcular la media suma / contador
8.- Mostrar la media 
9.- Fin


suma = 15
contador = 4

numero = Dame un numer: 5
suma = suma + numer (5)
contador = 1

numero = Dame un numero: 4
suma = suma + numer(4)
contador = 2

numero = Dame un numero: 6
suma = suma + numero(6)
contador = 3

Dame un numero: 0

5 + 4 + 6 + 0 = 15 / 3 = 5 
---------
    suma      = 15  /  3
			-------------------
			    suma / contador


--------------------------------------------------------------------
EJEMPLO 2.8
Suma de los números pares comprendidos entre 2 y 100.


1 % 2 = 1 -> impar -> Este no se suma
2 % 2 = 0 -> par   -> Este si se suma
3 % 2 = 1 -> impar -> Este no se suma
4 % 2 = 0 -> par   -> Este si se suma 
5 % 2 = 1 
6 % 2 = 0 
7 % 2 = 1 
8 % 2 = 0 
9 % 2 = 1 
10% 2 = 0 
.
.
.
100

			1 / 2 = 0
			1 % 2 = 1
						
			       0
			    ------
			 2	|  1
				   1

			11 / 2 = 5
			11 % 2 = 1
		
				   5
				------
			 2	| 11
			      10
				 ---
				   1


1.- Inicio
2.- Declarar e inicializar la variable suma = 0
3.- Repetir del 1 al 100
	3.1 Calcular el residuo de numero entre 2 -> Esto siempre me va dar 1 o 0 Es el comportamiento de division de 2
	3.2 Validar si el residuo es 0 (Si es 0 es numero par)
		3.2.1 Sumar el numero par a la variable suma
4.- Mostrar la suma de los numeros pares
5.- Fin

 	
------------------------------------------------------
EJEMPLO 2.9

Se desea realizar el algoritmo que resuelva el siguiente problema: Cálculo de los salarios semanal de los empleados
de una empresa, sabiendo que éstos se calculan en base a las horas semanales trabajadas y de acuerdo a un
precio especificado por horas. Si se pasan de cuarenta horas semanales, las horas extraordinarias se pagarán a
razón de 1,5 veces la hora ordinaria.

1.- Calculo de salario semanal
2.- Empleados de una empresa
3.- horas semanales
4.- Precio especificado x hora

horas semanales > 40 -> se paga horas extraordinarias 1.5 hora

Clase Empleados
	1.- Numero Empleados
	2.- Nombre
	3.- Numero horas trabaja
	4.- Salario x horia
	
	
crea banco de datos con una lista
	Numero Empleado 			Nombre				Numero HorasTrabajadas		Salario x hora
	      1						Juanito Perez				  55						180
		  2						Daniel Perez				  35						150
		  3						Fernando Gomez				  40						200
		  4						Maria Hernandez				   0						300
		  5   					Pedro Salas					  43						100
		  
		  
		  
Producir en consola 

Numero Empleado				Nombre				Numero Horas trabajadas		Salario x hora		Horas semana	Horas extras	 Pago semanal 	 Pago extra 	Total
		1					Juanito Perez		   	  		55						180				40				15	 $7,200.00 	 $4,050.00 	 $11,250.00 
		2					Daniel Perez		   	  		35						150				35				0	 $5,250.00 	 $-   	 $5,250.00 
		3					Fernando Gomez		   	  		40						200				40				0	 $8,000.00 	 $-   	 $8,000.00 
		4					Maria Hernandez		   	  		0						300				0				0			 $-   	 $-   	 $-   
		5					Pedro Salas	43		   	  		100						40				3				 		$4,000.00 	 $450.00 	 $4,450.00 



------------------------------------------------------------------------------------------
EJEMPLO 2.10

La escritura de algoritmos para realizar operaciones sencillas de conteo es una de las primeras cosas que una computadora
puede aprender.
Supongamos que se proporciona una secuencia de números, tales como
5 3 0 2 4 4 0 0 2 3 6 0 2
y desea contar e imprimir el número de ceros de la secuencia.


1.- Atraves de una lista
2.- Atraves de un arreglo



5 3 0 2 4 4 0 0 2 3  6  0  2
-----------------------------
0 1 2 3 4 5 6 7 8 9 10 11 12 


int[] arreglo = {5, 3, 0, 2, 4, 4, 0, 0, 2, 3,  6,  0,  2}


arreglo[8]     -----> 2
arreglo.length -----> 13


		5 3 0 2 4 4 0 0 2 3  6  0  2
		-----------------------------
		0 1 2 3 4 5 6 7 8 9 10 11 12 

contador++;  // contador = contador + 1


0	arreglo[iteracion] ----> 5
1   arreglo[iteracion] ----> 3
2   arreglo[iteracion] ----> 0
3   arreglo[iteracion] ----> 2
4   arreglo[iteracion] ----> 4 		
5   arreglo[iteracion] ----> 4
6   arreglo[iteracion] ----> 0
7   arreglo[iteracion] ----> 0
8   arreglo[iteracion] ----> 2
9   arreglo[iteracion] ----> 3
10  arreglo[iteracion] ----> 6
11  arreglo[iteracion] ----> 0
12  arreglo[iteracion] ----> 2
13  arreglo[iteracion] ----> error


1.- Inicio
2.- Definir el arreglo
3.- Declar e inicializar el contador = 0
4.- Repetir 0 hasta la longitud del arreglo(13)
	4.1. Obtener el numero en el arreglo en la posicion o iteracion actual
	4.2. Validar el numero si es igual a 0
			4.2.1 Incrementar el contador
5.- Mostrar el numero de 0 encontrados
6.- Fin

-------------------------------------------------------------------------------
EJEMPLO 2.11

Dados tres números, determinar si la suma de cualquier pareja de ellos es igual al tercer número. Si se cumple esta
condición, escribir “Iguales” y, en caso contrario, escribir “Distintas”.
En el caso de que los números sean: 3 9 6
la respuesta es "Iguales", ya que 3 + 6 = 9. Sin embargo, si los números fueran:
2 3 4
el resultado sería "Distintas

a = 3
b = 9
c = 6

a + b = c ? son Inguales?
a + c = b ? son iguales?
b + c = a ? son iguales?

---------------------------------------------------------------------------------
Persona
	Nombre
	Apellido Paterno
	Apellido Materno
	Sexo
	Fecha Nacimiento

Empleado	

	Datos, Propiedades
	--------------------------
	Nombre 
	Apellido Paterno
	Apellido Materno
	Sexo
	RFC
	Telefono
	Email
	Fecha de Nacimiento
	Nacionalidad
	Puesto
	Fecha Ingreso
	Salario Diario
	Numero Seguro Social
	Horario
	Total Faltas
	Direccion
		Calle
		Numero exterior
		Numero interior
		Colonia
		Municipio
		Estado
		Codigo Postal
	

	Comportamientos, Funcion Miembro, Metodo
	----------------------------------------
	Obtener edad
	Obtener Antiguedad


ALUMNO

	Datos Propiedades
	-------------------
	Id Alumno
	Numero Matricula
	Nombre
	Apellido Paterno
	Apelllido Materno
	Fecha de Nacimiento
	Sexo
	Carrera
	Fecha Ingreso
	Materias Cursadas (horario)
	Semestre
	Direccion
		Calle
		Numero exterior
		Numero interior
		Colonia
		Municipio
		Estado
		Codigo Postal
	

	Comportamientos, funcion Miembro Metodo
	------------------------
	Obtener Generacion


CLIENTES
	Datos Propiedades
	-------------------
		Id Cliente
		Numero Cliente
		Nombre
		Correo
		Telefono
		Fecha Afiliacion
		Ingresos mensuales
		Saldo (Adeudo)
		Historial Crediticio
		Historial SAT
		Direccion
			Calle
			Numero exterior
			Numero interior
			Colonia
			Municipio
			Estado
			Codigo Postal
		

		Comportamientos funcion miembro Metodo
		--------------------------------------


